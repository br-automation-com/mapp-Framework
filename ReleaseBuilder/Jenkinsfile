def mailRecipients = "Brittany.Langston@br-automation.com;Marcel.Voigt@br-automation.com;Wesley.Buchanan@br-automation.com"

def Version() {
    def tag = "V0.0.9"
    def count = powershell(returnStdout: true, script: "git rev-list HEAD --count").trim();
    try {
        tag = powershell(returnStdout: true, script: "git describe --abbrev=0").trim();
        count = powershell(returnStdout: true, script: "git rev-list $tag..HEAD --count").trim();
    }
    catch (err){
    }
    return "$tag.$count";
}

def Tag() {
    return powershell(returnStdout: true, script: "git describe --abbrev=0 --always").trim();
}

pipeline {
    agent any 
    environment {
        BUILD_FOLDER = 'ReleaseBuilder\\Builder'
        PROJECT_DIR = 'BaseProject'
        EXPORT_DIR = 'ReleaseBuilder\\ExportConfigurations'
        OUTPUT_DIR = 'ReleaseBuilder\\InstallerSetup\\TechnologySolution'
        PHYSICAL = 'Physical\\PPC2200'
        IMPORT_TOOL = 'ImportTool\\FrameworkImporter'
        EMAIL_TO = 'wesley.buchanan@br-automation.com'
    }
    stages {
        stage('Export Framework') {
            environment {
                VERSION = Version()
            }
            steps {
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\AlarmX.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\" --physical $PHYSICAL"
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Axis.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework --physical $PHYSICAL"
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Backup.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework --physical $PHYSICAL"
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\File.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework --physical $PHYSICAL"
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Recipe.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework --physical $PHYSICAL"
                bat "python \"$BUILD_FOLDER\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\UserX.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework --physical $PHYSICAL"
            }
        }
        stage('Build Import Tool') {
            environment {
                VERSION = Version()
            }
            steps {
                bat "python \"$BUILD_FOLDER\\BuildImportTool.py\" --project \"$IMPORT_TOOL\" --output \"$OUTPUT_DIR\\$VERSION\\Importer"
            }
        }
        stage('Build Help') {
            environment {
                VERSION = Version()
            }
            options {
                timeout(time: 30, unit: "SECONDS")
            }
            steps {
                script {
                    Exception caughtException = null
                    catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') { 
                        try { 
                            bat "python \"$BUILD_FOLDER\\BuildHelp.py\" --project \"$WORKSPACE\\\\\" --name mappFramework"
                        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
                            error "Caught ${e.toString()}" 
                        } catch (Throwable e) {
                            caughtException = e
                        }
                    }
                    if (caughtException) {
                        error caughtException.message
                    }
                }
            }
        }
        stage('Create Technology Solution') {
            environment {
                VERSION = Version()
            }
            steps {
                bat "python \"$BUILD_FOLDER\\ExportTechnologySolution.py\" --project \"$WORKSPACE\\ReleaseBuilder\\InstallerSetup\\FrameworkImporter_TS\" --version $Version"
            }
        }
        stage('Create Installer') {
            environment {
                VERSION = Version()
            }
            steps {
                bat "python \"$BUILD_FOLDER\\CreateInstaller.py\" --project \"$WORKSPACE\\ReleaseBuilder\" --name mappFramework --version $Version"
            }
        }
        stage('Deploy Release')
        {
            environment {
                TAG = Tag()
            }
            when
            {
                branch 'release/*'
            }
            steps {
                bat "xcopy \"ReleaseBuilder\\InstallerSetup\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\NA Product Management - mapp Framework\\Releases\\$TAG\\\" /y"
                bat "xcopy \"ReleaseBuilder\\InstallerSetup\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\mapp Framework Prototype Testers - General\\Releases\\$TAG\\\" /y"
            }
        }
        stage('Deploy Feature')
        {
            when
            {
                anyOf {
                    branch 'feature/*'
                    branch 'develop'
                }
            }
            steps {
                bat "xcopy \"ReleaseBuilder\\InstallerSetup\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\NA Product Management - mapp Framework\\Releases\\$BRANCH_NAME\\\" /y"
            }
        }

    }
    post {
         success {
            script {
                def jobName = currentBuild.fullDisplayName
        
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }
        }
         failure {
            script {
                def jobName = currentBuild.fullDisplayName
        
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }

         }
         unstable {
             echo 'This will run only if the run was marked as unstable'
         }
         changed {
             echo 'This will run only if the state of the Pipeline has changed'
             echo 'For example, if the Pipeline was previously failing but is now successful'
         }
    }
}