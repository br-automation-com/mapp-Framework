def mailRecipients = "Brittany.Langston@br-automation.com;Marcel.Voigt@br-automation.com;Wesley.Buchanan@br-automation.com"

def Version() {
    echo "Version";
    def tag = Tag();
    def count = powershell(returnStdout: true, script: "git rev-list HEAD --count").trim();
    try {
        count = powershell(returnStdout: true, script: "git rev-list $tag..HEAD --count").trim();
    }
    catch (err){
    }
    if (IsReleaseBranch()) {
        echo "Release Branch";
        return "$tag.$count";
    }
    echo "Not Release Branch";
    def countInt = 9000 + Integer.parseInt("$count");
    return "$tag.$countInt";
}

def IsReleaseBranch(){
    return Branch().matches("release/(.*)");
}

def Tag() {
    echo "Tag";
    def tag = "V0.0.1"
    try {
        tag = powershell(returnStdout: true, script: "git describe --abbrev=0 --always").trim();
    }
    catch (err){
    }
    return "$tag";
}

def Branch(){
    echo "Branch";
    def branch = "develop";
    if (env.BRANCH_NAME) {
        echo "environment variable set"
        branch = "${env.BRANCH_NAME}";
    }else {
        echo "environment variable not set"
        try {
            powershell(returnStdout: true, script: "git branch --show-current").trim();
        }catch (err){ 

        }
    }
    echo "$branch";
    return "$branch";
}

def MS_Build(){
    if (fileExists("C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild") == true){
        return "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild";
    }
    if (fileExists("C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild") == true){
        return "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild";
    }
    return "";
}

pipeline {
    agent any 
    environment {
        BUILD_FOLDER = "$WORKSPACE\\ReleaseBuilder\\Builder"
        PROJECT_DIR = "$WORKSPACE\\BaseProject\\mappFramework"
        EXPORT_DIR = "$WORKSPACE\\ReleaseBuilder\\ExportConfigurations"
        OUTPUT_DIR = "$WORKSPACE\\ReleaseBuilder\\InstallerSetup\\TechnologyPackage"
        PHYSICAL = "Physical\\Simulation"
        IMPORT_TOOL = "ImportTool\\FrameworkImporter"
        HELP_LOCATION = "$WORKSPACE\\Documentation";
        HELP_NAME = "mappFramework";
        HELP_FILE = "mappFramework.hnd";
        GERMAN_HELP_FILE = "mappFrameworkGerman.hnd";
        HELP_OUTPUT = "..\\ReleaseBuilder\\InstallerSetup\\Help";
    }
    stages {
        stage('Update Submodules') {
            environment {
                BRANCH = Branch();
            }
            steps {
                script
                {
                    try {
                        checkout([$class: 'GitSCM', branches: [[name: "$BRANCH"]], 
                                                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'BaseProject']], 
                                                    userRemoteConfigs: [[credentialsId: 'br-automation-com-github', url: 'https://github.com/br-automation-com/mapp-Framework']]])
                    }
                    catch (Exception e) {
                        checkout([$class: 'GitSCM', branches: [[name: "develop"]], 
                                                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'BaseProject']], 
                                                    userRemoteConfigs: [[credentialsId: 'br-automation-com-github', url: 'https://github.com/br-automation-com/mapp-Framework']]])
                    }
                    try {
                        checkout([$class: 'GitSCM', branches: [[name: "$BRANCH"]], 
                                                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ImportTool']], 
                                                userRemoteConfigs: [[credentialsId: 'Jenkins-BR-NA', url: 'https://github.com/br-na-pm/mappFrameworkImportTool']]])
                    }
                    catch (Exception e) {
                        checkout([$class: 'GitSCM', branches: [[name: "develop"]], 
                                                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ImportTool']], 
                                                userRemoteConfigs: [[credentialsId: 'Jenkins-BR-NA', url: 'https://github.com/br-na-pm/mappFrameworkImportTool']]])
                    
                    }
                }
            }
        }
        stage('Build Help') {
            environment {
                VERSION = Version();
            }
            steps {
                powershell(returnStdout: true, script: "& \"C:\\Program Files (x86)\\IBE Software\\HelpNDoc 6\\hnd6.exe\" \"$HELP_LOCATION\\${HELP_FILE}\" -s build -x=\"Build PDF documentation\" -t=\"Build PDF documentation:mappFramework\" -o=\"Build PDF documentation:${PROJECT_DIR}\\Logical\\mappView\\Resources\\Media\\Documents\\mappFrameworkEN.pdf\"");
                powershell(returnStdout: true, script: "& \"C:\\Program Files (x86)\\IBE Software\\HelpNDoc 6\\hnd6.exe\" \"$HELP_LOCATION\\${GERMAN_HELP_FILE}\" -s build -x=\"Build PDF documentation\" -t=\"Build PDF documentation:mappFramework\" -o=\"Build PDF documentation:${PROJECT_DIR}\\Logical\\mappView\\Resources\\Media\\Documents\\mappFrameworkDE.pdf\"");
                sleep 5;
                powershell(returnStdout: true, script: "python \"$ProjectBuilderScripts\\BuildHelp.py\" --project \"$HELP_LOCATION\" --file $HELP_FILE --name $HELP_NAME --output \"$HELP_OUTPUT\"");
                powershell(returnStdout: true, script: "python \"$ProjectBuilderScripts\\BuildHelp.py\" --project \"$HELP_LOCATION\" --file $GERMAN_HELP_FILE --name $HELP_NAME --output \"$HELP_OUTPUT\" --language de");
            }
        }
        stage('Export Framework') {
            environment {
                VERSION =  Version().substring(1, Version().lastIndexOf('.'));
            }
            steps {
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Documentation.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Documentation.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Motion\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\AlarmX.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Axis.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Motion\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Backup.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\File.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Recipe.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
                bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\UserX.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
				bat "python \"$ProjectBuilderScripts\\Export.py\" --project \"$PROJECT_DIR\" --config \"$EXPORT_DIR\\Audit.json\" --output \"$OUTPUT_DIR\\$VERSION\\Framework\\Services\" --physical $PHYSICAL"
            }
        }
        stage('Build Import Tool') {
            environment {
                VERSION = Version().substring(1, Version().lastIndexOf('.'));
                BRANCH = Branch();
                MSBUILD_PATH = MS_Build();
                MSBUILD = "$MSBUILD_PATH\\Current\\Bin\\msbuild.exe";
                NUGET = "$MSBUILD_PATH\\nuget.exe";
            }
            steps {
                powershell(returnStdout: true, script: ". '$IMPORT_TOOL\\GitVersion.ps1' \"$IMPORT_TOOL\\FrameworkImporter\" \"$BRANCH\"");
                powershell(returnStdout: true, script: ". '$NUGET' \"restore\" \"$WORKSPACE\\$IMPORT_TOOL\\FrameworkImporter.sln\"");
                powershell(returnStdout: true, script: ". '$MSBUILD' \"$WORKSPACE\\$IMPORT_TOOL\\FrameworkImporter.sln\" \"-p:Configuration=Release;optimize=true;DebugSymbols=false;DebugType=None;PreBuildEvent=;PostBuildEvent=;OutputPath=$OUTPUT_DIR\\$VERSION\\bin\\\"");
                powershell(returnStdout: true, script: "Copy-Item -Recurse \"$WORKSPACE\\$IMPORT_TOOL\\mappFrameworkExtension\\AS\\*\" -Destination \"$OUTPUT_DIR\\$VERSION\\\"");
            }
        }
        stage('Create Installer') {
            environment {
                VERSION = Version()
            }
            steps {
                bat "python \"$BUILD_FOLDER\\CreateInstaller.py\" --project \"$WORKSPACE\\ReleaseBuilder\" --name mappFramework --version $Version"
            }
        }
        stage('Deploy Release')
        {
            environment {
                TAG = Tag()
                VERSION = Version().substring(0, Version().lastIndexOf('.'));
                FILENAME = "AS4_TP_mappFramework_";
                FILEVERSION = Version().substring(1);
            }
            when
            {
                branch 'main'
            }
            steps {
                bat "xcopy \"ReleaseBuilder\\InstallerSetup\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\NA Product Management - mapp Framework\\Releases\\$TAG\\\" /y"
                pwsh ". '$ProjectBuilderScripts\\UploadToGitHub.ps1' $VERSION br-na-pm mappFramework \"ReleaseBuilder\\InstallerSetup\\Install\\${FILENAME}${FILEVERSION}.exe\""
                pwsh ". '$ProjectBuilderScripts\\UploadToGitHub.ps1' $VERSION br-automation-com mapp-Framework \"ReleaseBuilder\\InstallerSetup\\Install\\${FILENAME}${FILEVERSION}.exe\""
            }
        }
        stage('Deploy Feature')
        {
            environment {
                BRANCH = Branch();
                VERSION = Version().substring(0, Version().lastIndexOf('.'));
                FILENAME = "AS4_TP_mappFramework_";
                FILEVERSION = Version().substring(1);
            }
            when
            {
                anyOf {
                    branch 'feature/*'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                bat "xcopy \"ReleaseBuilder\\InstallerSetup\\Install\\*.exe\" \"C:\\Users\\buchananw\\ABB\\NA Product Management - mapp Framework\\Releases\\$BRANCH\\\" /y"
                pwsh ". '$ProjectBuilderScripts\\UploadToGitHub.ps1' $VERSION br-na-pm mappFramework \"ReleaseBuilder\\InstallerSetup\\Install\\${FILENAME}${FILEVERSION}.exe\""
            }
        }

    }
    post {
         success {
            script {
                def jobName = currentBuild.fullDisplayName
        
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }
        }
         failure {
            script {
                def jobName = currentBuild.fullDisplayName
        
                emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                        mimeType: 'text/html',
                        subject: "[Jenkins] ${jobName}",
                        to: "${mailRecipients}",
                        from: "wesley.buchanan@br-automation.com",
                        replyTo: "${mailRecipients}"
            }

         }
         unstable {
             echo 'This will run only if the run was marked as unstable'
         }
         changed {
             echo 'This will run only if the state of the Pipeline has changed'
             echo 'For example, if the Pipeline was previously failing but is now successful'
         }
    }
}
